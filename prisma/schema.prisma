// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String              @id @default(uuid())
  created_at             DateTime            @default(now())
  updated_at             DateTime            @updatedAt
  deleted_at             DateTime?
  last_login_at          DateTime            @default(now())
  last_seen_at           DateTime            @default(now())
  email                  String              @unique
  admin                  Boolean             @default(false)
  username               String?
  password               String?
  email_token            String?
  email_token_expires_at DateTime?
  email_verified         Boolean             @default(false)
  referral_id            String              @unique
  Shop                   Shop[]
  Chocolatine            Chocolatine[]
  ChocolatineReview      ChocolatineReview[]
  UserAction             UserAction[]
  UserOs                 UserOs[]
}

model UserOs {
  id              String   @id @default(uuid())
  unique_key      String   @unique
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  is_mobile       Boolean  @default(false)
  os              String?
  is_homescreen   Boolean  @default(false)
  is_app          Boolean  @default(false)
  browser_type    String
  browser_name    String
  browser_version String
  browser_os      String
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String
}

model Shop {
  id                        String              @id @default(uuid())
  google_map_link           String?
  created_at                DateTime            @default(now())
  updated_at                DateTime            @updatedAt
  deleted_at                DateTime?
  type                      String?             @default("Bakery")
  description               String?
  name                      String
  telephone                 String?
  url                       String?
  streetAddress             String?
  addresspostalCode         String?
  addressLocality           String
  addressCountry            String?
  latitude                  Float?
  longitude                 Float?
  openingHoursSpecification Json?
  createdByUser             User                @relation(fields: [createdByUserId], references: [id])
  createdByUserId           String
  Chocolatine               Chocolatine[]
  ChocolatineReview         ChocolatineReview[]
}

model Chocolatine {
  id              String    @id @default(uuid())
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  name            String
  price           Float
  priceCurrency   String    @default("EUR")
  homemade        String    @default("I don't know, nobody tried yet") // I don't know, nobody tried yet, I think so, I don't think so, Yes, No
  shop            Shop      @relation(fields: [shopId], references: [id])
  shopId          String    @unique
  createdByUser   User      @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
}

model ChocolatineReview {
  id                    String    @id @default(uuid())
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted_at            DateTime?
  comment               String?
  light_or_dense        Int // -2 is for very light, -1 for light, 0 for medium, 1 for dense, 2 for very dense
  flaky_or_brioche      Int // -2 is for very brioche, -1 for brioche, 0 for medium, 1 for flaky, 2 for very flaky
  buttery               Int // -2 is for not buttery at all, -1 for not buttery, 0 for medium, 1 for buttery, 2 for very buttery
  golden_or_pale        Int // -2 is for very golden, -1 for golden, 0 for medium, 1 for pale, 2 for very pale
  crispy_or_soft        Int // -2 is for very crispy, -1 for crispy, 0 for medium, 1 for soft, 2 for very soft
  big_or_small          Int // -2 for very small, -1 for small, 0 for medium, 1 for big, 2 for very big
  chocolate_disposition Int // -2 for superimposed, -1 for stuck side by side, 0 for well distributed, 1 for too far away, 2 for on the edges
  good_or_not_good      Int // subjective, score from 0 to 20
  shop                  Shop      @relation(fields: [shopId], references: [id])
  shopId                String
  user                  User      @relation(fields: [user_id], references: [id])
  user_id               String
}

enum Action {
  USER_SHOP_NEW
  USER_SHOP_UPDATE
  USER_REFERRAL_CREATER
  USER_REFERRAL_RECEIVER
  USER_CHOCOLATINE_NEW
  USER_CHOCOLATINE_UPDATE
  USER_CHOCOLATINE_REVIEW
  USER_LINKEDIN_LIKE
  USER_LINKEDIN_COMMENT
  USER_LINKEDIN_SHARE
  INVESTOR_EURO_AMOUNT
  BUILDER_HOUR_AMOUNT
}

model UserAction {
  id         String    @id @default(uuid())
  action     Action
  shares     Int       @default(1)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  user       User      @relation(fields: [user_id], references: [id])
  user_id    String
}
